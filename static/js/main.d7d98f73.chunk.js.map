{"version":3,"sources":["Components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","carne","horario","llegotarde","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTodo","setState","target","value","name","console","log","className","onSubmit","type","onChange","placeholder","class","id","for","Component","App","todos","handleAddTodo","index","filter","i","todo","map","key","onClick","removeTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAmFeA,E,YAhFb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXC,MAAO,GACPC,QAAS,GACTC,WAAY,IAEd,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARP,E,0EAWFE,GACXA,EAAEC,iBACFC,KAAKC,MAAMC,UAAUF,KAAKT,OAC1BS,KAAKG,SAAS,CACVX,MAAO,GACPC,QAAS,GACTC,WAAY,O,wCAIAI,GAAI,IAAD,EACGA,EAAEM,OAAjBC,EADY,EACZA,MAAOC,EADK,EACLA,KACdC,QAAQC,IAAIH,EAAOC,GACnBN,KAAKG,SAAL,eACGG,EAAOD,M,+BAKV,OACE,yBAAKI,UAAU,QAEb,0BAAMC,SAAUV,KAAKH,aAAcY,UAAU,aAC7C,gDACE,yBAAKA,UAAU,cACb,2BACEE,KAAK,OACLL,KAAK,QACLG,UAAU,eACVJ,MAAOL,KAAKT,MAAMC,MAClBoB,SAAUZ,KAAKL,kBACfkB,YAAY,MAKhB,yBAAKJ,UAAU,cACb,gEACA,4BACIH,KAAK,UACLG,UAAU,eACVJ,MAAOL,KAAKT,MAAME,QAClBmB,SAAUZ,KAAKL,mBAEX,yDACA,2DACA,gEACA,2DACA,2DACA,8DAGV,yBAAKc,UAAU,cACf,2CACA,yBAAKK,MAAM,gCACH,2BAAOH,KAAK,WAAWG,MAAM,uBAAuBC,GAAG,gBACtD,2BAAOD,MAAM,uBAAuBE,IAAI,eAAxC,qBAGT,4BAAQL,KAAK,SAASF,UAAU,mBAAhC,kB,GAvEaQ,aCkFRC,E,YAzEb,aAAe,IAAD,8BACZ,+CACK3B,MAAQ,CACX4B,WAEF,EAAKC,cAAgB,EAAKA,cAAcxB,KAAnB,gBALT,E,wEAQHyB,GACTrB,KAAKG,SAAS,CACZgB,MAAOnB,KAAKT,MAAM4B,MAAMG,QAAO,SAACxB,EAAGyB,GACjC,OAAOA,IAAMF,S,oCAKLG,GACZxB,KAAKG,SAAS,CACZgB,MAAM,GAAD,mBAAMnB,KAAKT,MAAM4B,OAAjB,CAAwBK,Q,+BAIvB,IAAD,OACDL,EAAQnB,KAAKT,MAAM4B,MAAMM,KAAI,SAACD,EAAMD,GACxC,OACE,yBAAKd,UAAU,WAAWiB,IAAKH,GAC7B,yBAAKd,UAAU,aACb,yBAAKA,UAAU,0BACb,4BAAKe,EAAKhC,OACV,0BAAMiB,UAAU,sCAEbe,EAAK/B,UAGV,yBAAKgB,UAAU,aACd,2CACEe,EAAK9B,YAER,yBAAKe,UAAU,eACb,4BACEA,UAAU,iBACVkB,QAAS,EAAKC,WAAWhC,KAAK,EAAM2B,IAFtC,gBAYV,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YAEb,yBAAKA,UAAU,wBAEb,kBAAC,EAAD,CAAUP,UAAWF,KAAKoB,iBAG5B,yBAAKX,UAAU,YACb,yBAAKA,UAAU,UACZU,W,GAhECF,aCEEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d7d98f73.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      carne: '',\r\n      horario: '',\r\n      llegotarde: '',\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n        carne: '',\r\n        horario: '',\r\n        llegotarde: '',\r\n    });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const {value, name} = e.target;\r\n    console.log(value, name);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n       \r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n        <p>Ingrese su Carnet</p>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"carne\"\r\n              className=\"form-control\"\r\n              value={this.state.carne}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"\"\r\n              />\r\n          </div>\r\n          \r\n          \r\n          <div className=\"form-group\">\r\n            <p>Ingrese su horario de Laboratorio</p>\r\n            <select\r\n                name=\"horario\"\r\n                className=\"form-control\"\r\n                value={this.state.horario}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                    <option>Lunes de 9:00 a 11.00</option>\r\n                    <option>Martes de 13:30 a 15:30</option>\r\n                    <option>Miércoles de 9:00 a 11.00</option>\r\n                    <option>Jueves de 13:30 a 15:30</option>\r\n                    <option>Viernes de 9:00 a 11.00</option>\r\n                    <option>Viernes de 15:30 a 17:30</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <p>Llego Tarde?</p>\r\n          <div class=\"custom-control custom-switch\">\r\n                  <input type=\"checkbox\" class=\"custom-control-input\" id=\"late_switch\"></input>\r\n                   <label class=\"custom-control-label\" for=\"late_switch\">Llegó tarde?</label>\r\n                                    </div>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Ingresar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\n// data\r\nimport { todos } from './todos.json';\r\n\r\n// subcomponents\r\nimport TodoForm from './Components/TodoForm';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos\r\n    }\r\n    this.handleAddTodo = this.handleAddTodo.bind(this);\r\n  }\r\n\r\n  removeTodo(index) {\r\n    this.setState({\r\n      todos: this.state.todos.filter((e, i) => {\r\n        return i !== index\r\n      })\r\n    });\r\n  }\r\n\r\n  handleAddTodo(todo) {\r\n    this.setState({\r\n      todos: [...this.state.todos, todo]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todos.map((todo, i) => {\r\n      return (\r\n        <div className=\"col-md-4\" key={i}>\r\n          <div className=\"card mt-4\">\r\n            <div className=\"card-title text-center\">\r\n              <h3>{todo.carne}</h3>\r\n              <span className=\"badge badge-pill badge-danger ml-2\">\r\n                \r\n                {todo.horario}\r\n              </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n             <p>Llego Tarde?</p>  \r\n              {todo.llegotarde}\r\n            </div>\r\n            <div className=\"card-footer\">\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={this.removeTodo.bind(this, i)}>\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    });\r\n\r\n    // RETURN THE COMPONENT\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <div className=\"row mt-4\">\r\n\r\n            <div className=\"col-md-4 text-center\">\r\n                \r\n              <TodoForm onAddTodo={this.handleAddTodo}></TodoForm>\r\n            </div>\r\n\r\n            <div className=\"col-md-8\">\r\n              <div className=\"column\">\r\n                {todos}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './bootstrap.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}